stages:
  - test
  - build
  - sync
  - release

test-create-cache:
  environment:
    name: testing
  image: ubuntu:24.04
  stage: test
  timeout: 1 hours
  tags:
    - $DOCKER_RUNNER_TAG
  variables:
    DEPLOY_TYPE: "master"
  script:
    - export TMPFILE=$(mktemp)
    - chmod +x ./installation/shared/vbt.sh
    - bash -c 'set -o pipefail && ./installation/shared/vbt.sh "create_cache.py" "./installation/" | tee "$TMPFILE"'
    - ls --all ./installation/shared/
    - mv ./installation/shared/.generate_cache.log .create_cache.generate_cache.log
    - export RESULT=$(grep . "$TMPFILE" | tail -n 2 | head -n 1)
    - mv $TMPFILE .complete_log.txt
    - |
      if [ "$RESULT" != "true" ]; then
       exit 1
      fi
  artifacts:
    when: always
    paths:
      - .complete_log.txt
      - .create_cache.generate_cache.log
    expire_in: 1 week

test-use-cache:
  environment:
    name: testing
  image: ubuntu:24.04
  stage: test
  timeout: 1 hours
  tags:
    - $DOCKER_RUNNER_TAG
  variables:
    DEPLOY_TYPE: "master"
  needs:
    - test-create-cache
  script:
    - export TMPFILE=$(mktemp)
    - chmod +x ./installation/shared/vbt.sh
    - ls
    - bash -c 'set -o pipefail && ./installation/shared/vbt.sh "use_cache.py" "./installation/" | tee "$TMPFILE"'
    - echo "==============================================="
    - ls
    - echo "==============================================="
    - ls --all ./installation/shared/
    - mv ./installation/shared/.generate_cache.log .use_cache.generate_cache.log
    - echo "==============================================="
    - export RESULT=$(grep . "$TMPFILE" | tail -n 2 | head -n 1)
    - mv $TMPFILE .complete_log.txt
    - source /builds/virtualbraintwin/infrastructure/virtualbraintwin/installation/spack/share/spack/setup-env.sh && spack env activate -p  /builds/virtualbraintwin/infrastructure/virtualbraintwin/installation/data/test-spack-env && spack find -c
    - |
      if [ "$RESULT" != "true" ]; then
       exit 1
      fi
  artifacts:
    when: always
    paths:
      - .complete_log.txt
      - .use_cache.generate_cache.log
    expire_in: 1 week

build-cache-ubuntu-local:
  environment:
    name: caching-ubuntu
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $OPERATION == "cache"'
  image: ubuntu:24.04
  stage: build
  timeout: 72 hours
  tags:
    - $DOCKER_RUNNER_TAG
  variables:
    DEPLOY_TYPE: "local"
    CONCRETIZE_OCI_VERSION: "CONCRETIZE_OCI_VERSION_UBUNTU"
    BUILDCACHE_OCI_VERSION: "BUILDCACHE_OCI_VERSION_UBUNTU"
  script:
    - export TMPFILE=$(mktemp)
    - chmod +x ./installation/shared/vbt.sh
    - bash -c 'set -o pipefail && ./installation/shared/vbt.sh "create_cache.py" "./installation/" | tee "$TMPFILE"'
    - mv ./installation/shared/.generate_cache.log .build_cache_ubuntu_local.generate_cache.log
    - export RESULT=$(grep . "$TMPFILE" | tail -n 2 | head -n 1)
    - mv $TMPFILE .complete_log.txt
    - |
      if [ "$RESULT" != "true" ]; then
       exit 1
      fi
  artifacts:
    when: always
    paths:
      - .complete_log.txt
      - .build_cache_ubuntu_local.generate_cache.log
    expire_in: never

.cleanup-hpc-environment-template:
  environment:
    name: caching-rocky
  variables:
    GIT_STRATEGY: none
  id_tokens:
    SITE_ID_TOKEN:
      aud: "https://gitlab.jsc.fz-juelich.de"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $OPERATION == "cache"'
  timeout: 2 hours
  tags:
    - juwels
    - jacamar
    - login
    - shell
  script:
    - rm -rf /p/scratch/vbt/vbt-spack/vbt_spack_kernel/${KERNEL_VERSION} || exit -1

prep-hpc-environment-build:
  stage: build
  extends: .cleanup-hpc-environment-template

build-cache-rocky-hpc:
  environment:
    name: caching-rocky
  variables:
    CUSTOM_CI_BUILDS_DIR: /p/scratch/vbt/vbt-spack/vbt_spack_kernel/$KERNEL_VERSION
    HOME: /p/scratch/vbt/vbt-spack/vbt_spack_kernel/$KERNEL_VERSION
    SPACK_USER_CONFIG_PATH: /p/scratch/vbt/vbt-spack/vbt_spack_kernel/$KERNEL_VERSION
    DEPLOY_TYPE: "hpc"
  id_tokens:
    SITE_ID_TOKEN:
      aud: "https://gitlab.jsc.fz-juelich.de"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $OPERATION == "cache"'
  stage: build
  timeout: 72 hours
  tags:
    - juwels
    - jacamar
    - login
    - shell
  needs:
    - prep-hpc-environment-build
  script:
    - gcc --version
    - export FULL_PATH=$(pwd)
    - cd $CUSTOM_CI_BUILDS_DIR
    - cp -r $FULL_PATH $CUSTOM_CI_BUILDS_DIR
    - cd virtualbraintwin
    - module load StdEnv/2025
    - export TMPFILE=$(mktemp)
    - chmod +x ./installation/shared/vbt.sh
    - bash -c 'set -o pipefail && ./installation/shared/vbt.sh "create_cache.py" "./installation/" | tee "$TMPFILE"'
    - cp $CUSTOM_CI_BUILDS_DIR/virtualbraintwin/installation/shared/.generate_cache.log $CI_PROJECT_DIR/build_cache_ubuntu_rocky.generate_cache.log
    - export RESULT=$(grep . "$TMPFILE" | tail -n 2 | head -n 1)
    - cp $TMPFILE $CI_PROJECT_DIR/complete_log.txt
    - |
      if [ "$RESULT" != "true" ]; then
       exit 1
      fi
  after_script:
    - mkdir -p $CI_PROJECT_DIR/spack_logs/installed $CI_PROJECT_DIR/spack_logs/not_installed
    # for succesfully installed packages: keep the spack logs for any package modified during this CI job
    # (we use repo.yaml, that is modified at each start of the pipeline, as a reference file)
    - . ./installation/spack/share/spack/setup-env.sh
    - cd $(spack-python -c "print(spack.store.parse_install_tree(spack.config.get('config'))[0])")
    - find . -mindepth 4 -maxdepth 4 -newer $SPACK_REPO_PATH/repo.yaml \( -name ".spack" -o -name ".build" \) -exec cp -r --parents "{}" $CI_PROJECT_DIR/spack_logs/installed \;
    # for not succesfully installed packages: also keep the spack logs for any packages that failed
    - if cd /tmp/$(whoami)/spack-stage/; then find . -maxdepth 2 \( -name "*.txt" -o -name ".install_time_tests" \) -exec cp -r --parents "{}" $CI_PROJECT_DIR/spack_logs/not_installed \;; fi
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/complete_log.txt
      - $CI_PROJECT_DIR/build_cache_ubuntu_rocky.generate_cache.log
      - spack_logs
    expire_in: never

clean-hpc-environment-build:
  stage: build
  extends: .cleanup-hpc-environment-template
  needs:
    - build-cache-rocky-hpc

prep-hpc-environment-release:
  stage: release
  rules:
    - if: $CI_COMMIT_TAG
  extends: .cleanup-hpc-environment-template

install-vbt-spack-env-hpc:
  environment:
    name: caching-rocky
  variables:
    CUSTOM_CI_BUILDS_DIR: /p/scratch/vbt/vbt-spack/vbt_spack_kernel/$KERNEL_VERSION
    HOME: /p/scratch/vbt/vbt-spack/vbt_spack_kernel/$KERNEL_VERSION
    SPACK_USER_CONFIG_PATH: /p/scratch/vbt/vbt-spack/vbt_spack_kernel/$KERNEL_VERSION
    DEPLOY_TYPE: "hpc"
  id_tokens:
    SITE_ID_TOKEN:
      aud: "https://gitlab.jsc.fz-juelich.de"
  rules:
    - if: $CI_COMMIT_TAG
  stage: release
  timeout: 72 hours
  tags:
    - juwels
    - jacamar
    - login
    - shell
  needs:
    - prep-hpc-environment-release
  script:
    - echo $CUSTOM_CI_BUILDS_DIR
    - echo $CI_PROJECT_DIR
    - pwd
    - gcc --version
    - export FULL_PATH=$(pwd)
    - cd $CUSTOM_CI_BUILDS_DIR
    - cp -r $FULL_PATH $CUSTOM_CI_BUILDS_DIR
    - cd virtualbraintwin
    - module load StdEnv/2025
    - export TMPFILE=$(mktemp)
    - chmod +x ./installation/shared/vbt.sh
    - bash -c 'set -o pipefail && ./installation/shared/vbt.sh "use_cache.py" "./installation/" | tee "$TMPFILE"'
    - cp $CUSTOM_CI_BUILDS_DIR/virtualbraintwin/installation/shared/.generate_cache.log $CI_PROJECT_DIR/build_cache_ubuntu_rocky.generate_cache.log
    - export RESULT=$(grep . "$TMPFILE" | tail -n 2 | head -n 1)
    - cp $TMPFILE $CI_PROJECT_DIR/complete_log.txt
    - |
      if [ "$RESULT" != "true" ]; then
       exit 1
      fi
  after_script:
    - mkdir -p $CI_PROJECT_DIR/spack_logs/installed $CI_PROJECT_DIR/spack_logs/not_installed
    # for succesfully installed packages: keep the spack logs for any package modified during this CI job
    # (we use repo.yaml, that is modified at each start of the pipeline, as a reference file)
    - . ./installation/spack/share/spack/setup-env.sh
    - cd $(spack-python -c "print(spack.store.parse_install_tree(spack.config.get('config'))[0])")
    - find . -mindepth 4 -maxdepth 4 -newer $SPACK_REPO_PATH/repo.yaml \( -name ".spack" -o -name ".build" \) -exec cp -r --parents "{}" $CI_PROJECT_DIR/spack_logs/installed \;
    # for not succesfully installed packages: also keep the spack logs for any packages that failed
    - if cd /tmp/$(whoami)/spack-stage/; then find . -maxdepth 2 \( -name "*.txt" -o -name ".install_time_tests" \) -exec cp -r --parents "{}" $CI_PROJECT_DIR/spack_logs/not_installed \;; fi
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/complete_log.txt
      - $CI_PROJECT_DIR/build_cache_ubuntu_rocky.generate_cache.log
      - spack_logs
    expire_in: never

cleanup-release-env:
  stage: release
  environment:
    name: caching-rocky
  id_tokens:
    SITE_ID_TOKEN:
      aud: "https://gitlab.jsc.fz-juelich.de"
  tags:
    - juwels
    - jacamar
    - login
    - shell
  needs:
    - install-vbt-spack-env-hpc
  rules:
    - if: $CI_COMMIT_TAG
  variables:
    GIT_STRATEGY: none
    CUSTOM_CI_BUILDS_DIR: /p/scratch/vbt/vbt-spack/vbt_spack_kernel/$KERNEL_VERSION
  script:
    - echo "Cleaning up project dir..."
  after_script:
    - echo ${CUSTOM_CI_BUILDS_DIR}/${USER}
    - rm -rf ${CUSTOM_CI_BUILDS_DIR}/${USER}
    - ls --all

release-vbt-kernel:
  environment:
    name: caching-rocky
  needs:
    - cleanup-release-env
  variables:
    GIT_STRATEGY: none
    CUSTOM_CI_BUILDS_DIR: /p/scratch/vbt/vbt-spack/vbt_spack_kernel/$KERNEL_VERSION
    HOME: /p/scratch/vbt/vbt-spack/vbt_spack_kernel/$KERNEL_VERSION
    SPACK_USER_CONFIG_PATH: /p/scratch/vbt/vbt-spack/vbt_spack_kernel/$KERNEL_VERSION
    DEPLOY_TYPE: "hpc"
  id_tokens:
    SITE_ID_TOKEN:
      aud: "https://gitlab.jsc.fz-juelich.de"
  rules:
    - if: $CI_COMMIT_TAG
  stage: release
  timeout: 1 hours
  tags:
    - juwels
    - jacamar
    - login
    - shell
  script:
    - export FULL_PATH=$(pwd)
    - echo $FULL_PATH
    - cd $CUSTOM_CI_BUILDS_DIR
    - ls
    - echo $USER
    - cd ./virtualbraintwin/installation/hpc/
    - bash ./create_hpc_vbt_kernel.sh

sync_to_github:
  stage: sync
  environment:
    name: git-sync
  image: ubuntu:24.04
  tags:
    - $DOCKER_RUNNER_TAG
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "push"'
      when: on_success
    - when: never
  before_script:
    - apt-get update
    - apt-get install -y git ca-certificates
  script:
    - git clone -b master https://oauth2:$GITLAB_TOKEN@gitlab.jsc.fz-juelich.de/virtualbraintwin/virtualbraintwin.git
    - cd virtualbraintwin
    - git remote add github https://$GITHUB_MIRROR_TOKEN@github.com/virtual-brain-twins/twin-distribution.git
    - git push github master:master --force

create-box:
  environment:
    name: caching-ubuntu
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $OPERATION == "release"'
  stage: release
  when: manual
  timeout: 3 hours
  tags:
    - vm-runner
  before_script:
    - echo "VirtualBox version:"
    - vboxmanage --version
    - echo "Vagrant version:"
    - vagrant --version
    # install VirtualBox and Vagrant on the Ci runner
    - chmod +x $CI_PROJECT_DIR/installation/shared/release/release_vagrant_box_tools.sh
    - $CI_PROJECT_DIR/installation/shared/release/release_vagrant_box_tools.sh
  script:
    # Output version to verify install
    - echo "VirtualBox version:"
    - vboxmanage --version
    - echo "Vagrant version:"
    - vagrant --version
    - cd $CI_PROJECT_DIR/installation/local/VM_user
  #    - vagrant up
  #    - cd /
  #    - vagrant package --base VM_vbt_user --output $BOX_NAME
  artifacts:
    when: always
    paths:
      - $BOX_NAME
    expire_in: never

release-gitlab:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - release-vbt-kernel
  #    - create-box
  tags:
    - $DOCKER_RUNNER_TAG
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "running release_job"
  release:
    tag_name: '$CI_COMMIT_TAG'
    description: '$CI_COMMIT_TAG'
  artifacts:
    when: always
    paths:
      - $BOX_NAME
    expire_in: never
