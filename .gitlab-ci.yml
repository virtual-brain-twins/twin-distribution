stages:
  - test
  - build
  - release

test-create-cache:
  environment:
    name: testing
  rules:
    - if: '$CI_COMMIT_BRANCH != "master" && $CI_COMMIT_BRANCH != "dev"'
      when: always
    - when: never
  image: ubuntu:24.04
  stage: test
  timeout: 1 hours
  tags:
    - $DOCKER_RUNNER_TAG
  variables:
    DEPLOY_TYPE: "master"
  script:
    - export TMPFILE=$(mktemp)
    - chmod +x ./installation/shared/vbt.sh
    - bash -c 'set -o pipefail && ./installation/shared/vbt.sh "create_cache.py" "./installation/" | tee "$TMPFILE"'
    - mv ./installation/shared/.dedal.log .create_cache.dedal.log
    - mv ./installation/shared/.generate_cache.log .create_cache.generate_cache.log
    - export RESULT=$(grep . "$TMPFILE" | tail -n 2 | head -n 1)
    - mv $TMPFILE .complete_log.txt
    - |
      if [ "$RESULT" != "true" ]; then
       exit 1
      fi
  artifacts:
    paths:
      - .complete_log.txt
      - .create_cache.dedal.log
      - .create_cache.generate_cache.log
    expire_in: 1 week

test-use-cache:
  environment:
    name: testing
  rules:
    - if: '$CI_COMMIT_BRANCH != "master" && $CI_COMMIT_BRANCH != "dev"'
      when: always
    - when: never
  image: ubuntu:24.04
  stage: test
  timeout: 1 hours
  tags:
    - $DOCKER_RUNNER_TAG
  variables:
    DEPLOY_TYPE: "master"
  script:
    - export TMPFILE=$(mktemp)
    - chmod +x ./installation/shared/vbt.sh
    - bash -c 'set -o pipefail && ./installation/shared/vbt.sh "use_cache.py" "./installation/" | tee "$TMPFILE"'
    - mv ./installation/shared/.dedal.log .use_cache.dedal.log
    - mv ./installation/shared/.generate_cache.log .use_cache.generate_cache.log
    - export RESULT=$(grep . "$TMPFILE" | tail -n 2 | head -n 1)
    - mv $TMPFILE .complete_log.txt
    - |
      if [ "$RESULT" != "true" ]; then
       exit 1
      fi
  artifacts:
    paths:
      - .complete_log.txt
      - .use_cache.dedal.log
      - .use_cache.generate_cache.log
    expire_in: 1 week

build-cache-ubuntu-local:
  environment:
    name: caching-ubuntu
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $OPERATION == "cache"'
  image: ubuntu:24.04
  stage: build
  timeout: 72 hours
  tags:
    - $DOCKER_RUNNER_TAG
  variables:
    DEPLOY_TYPE: "local"
    CONCRETIZE_OCI_VERSION: "CONCRETIZE_OCI_VERSION_UBUNTU"
    BUILDCACHE_OCI_VERSION: "BUILDCACHE_OCI_VERSION_UBUNTU"
  script:
    - export TMPFILE=$(mktemp)
    - chmod +x ./installation/shared/vbt.sh
    - bash -c 'set -o pipefail && ./installation/shared/vbt.sh "create_cache.py" "./installation/" | tee "$TMPFILE"'
    - mv ./installation/shared/.dedal.log .build_cache_ubuntu_local.dedal.log
    - mv ./installation/shared/.generate_cache.log .build_cache_ubuntu_local.generate_cache.log
    - export RESULT=$(grep . "$TMPFILE" | tail -n 2 | head -n 1)
    - mv $TMPFILE .complete_log.txt
    - |
      if [ "$RESULT" != "true" ]; then
       exit 1
      fi
  artifacts:
    when: always
    paths:
      - .complete_log.txt
      - .build_cache_ubuntu_local.dedal.log
      - .build_cache_ubuntu_local.generate_cache.log
    expire_in: never

build-cache-rocky-hpc:
  variables:
    CUSTOM_CI_BUILDS_DIR: /p/scratch/vbt/vbt-spack/vbt_spack_kernel_job
    HOME: /p/scratch/vbt/vbt-spack/vbt_spack_kernel_job
    SPACK_USER_CONFIG_PATH: /p/scratch/vbt/vbt-spack/vbt_spack_kernel_job
    DEPLOY_TYPE: "hpc"
  id_tokens:
    SITE_ID_TOKEN:
      aud: "https://gitlab.jsc.fz-juelich.de"
  environment:
    name: caching-rocky
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $OPERATION == "cache"'
  stage: build
  timeout: 72 hours
  tags:
    - juwels
    - jacamar
    - login
    - shell
  script:
    - gcc --version
    - module load StdEnv/2025
    - export TMPFILE=$(mktemp)
    - chmod +x ./installation/shared/vbt.sh
    - bash -c 'set -o pipefail && ./installation/shared/vbt.sh "create_cache.py" "./installation/" | tee "$TMPFILE"'
    - mv ./installation/shared/.dedal.log .build_cache_ubuntu_rocky.dedal.log
    - mv ./installation/shared/.generate_cache.log .build_cache_ubuntu_rocky.generate_cache.log
    - export RESULT=$(grep . "$TMPFILE" | tail -n 2 | head -n 1)
    - mv $TMPFILE .complete_log.txt
    - |
      if [ "$RESULT" != "true" ]; then
       exit 1
      fi
  artifacts:
    when: always
    paths:
      - .complete_log.txt
      - .build_cache_ubuntu_rocky.dedal.log
      - .build_cache_ubuntu_rocky.generate_cache.log
    expire_in: never

create-box:
  environment:
    name: caching-ubuntu
  rules:
    - if: $CI_COMMIT_TAG
  image: ubuntu:24.04
  stage: release
  when: manual
  timeout: 3 hours
  tags:
    - $SHELL_RUNNER_TAG
  before_script:
    # install VirtualBox and Vagrant on the Ci runner
    - chmod +x ./installation/shared/release/release_vagrant_box_tools.sh
    - ./installation/shared/release1/release_vagrant_box_tools.sh
  script:
    # Output version to verify install
    - echo "VirtualBox version:"
    - vboxmanage --version
    - echo "Vagrant version:"
    - vagrant --version
    - cd ../VM_user
    - vagrant up
    - cd /
    - vagrant package --base VM_vbt_user --output $BOX_NAME
  artifacts:
    paths:
      - $BOX_NAME
    expire_in: never

release-gitlab:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs: [ "create-box" ]
  tags:
    - $DOCKER_RUNNER_TAG
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "running release_job"
  release:
    tag_name: '$CI_COMMIT_TAG'
    description: '$CI_COMMIT_TAG'
  artifacts:
    paths:
      - $BOX_NAME
    expire_in: never
